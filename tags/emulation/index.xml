<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emulation on Emunix</title>
    <link>https://emunix.org/tags/emulation/</link>
    <description>Recent content in emulation on Emunix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>© 2011-2020, &lt;a href=&#34;mailto:btimofeev@emunix.org&#34;&gt;Борис Тимофеев&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 30 Jun 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://emunix.org/tags/emulation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Пишем эмулятор CHIP-8. Часть 4: Ядро</title>
      <link>https://emunix.org/post/writing-chip-8-emulator-part-4-kernel/</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://emunix.org/post/writing-chip-8-emulator-part-4-kernel/</guid>
      <description>В сегодняшней статье мы перейдем непосредственно к самой важной части - написанию ядра нашего эмулятора.
В общем виде эмуляция CHIP8 выглядит следующим образом:
 Мы объявляем переменные, которые будут представлять регистры процессора, массивы которые представляют память, экран, состояние клавиатуры и т.п. Инициализируем эти переменные начальными значениями, очищаем массивы памяти и экрана, загружаем в память стандартные шрифты CHIP8/SCHIP. После этого загружаем в память игру (копируем ее в массив памяти со смещением 0x200 от начала массива)   Считываем из памяти по адресу PC двухбайтовый опкод, конструкцией switch-case выбираем его и выполняем (здесь мы должны добиться полного соответствия с эмулируемой платформой: если опкод CHIP-8 присваивает регистру I какое-то значение, то и мы присваиваем его нашей переменной I; если опкод сдвигает изображение на экране на несколько пикселей вправо, то и мы сдвигаем данные в массиве представляющем экран, и т.</description>
    </item>
    
    <item>
      <title>Пишем эмулятор CHIP-8. Часть 3: Примеры программ</title>
      <link>https://emunix.org/post/writing-chip-8-emulator-part-3/</link>
      <pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://emunix.org/post/writing-chip-8-emulator-part-3/</guid>
      <description>&lt;p&gt;В прошлой статье мы рассмотрели опкоды CHIP-8. Сегодня попробуем написать несколько простых демонстрационных программ для него.&lt;/p&gt;
&lt;h2 id=&#34;chipper&#34;&gt;Chipper&lt;/h2&gt;
&lt;p&gt;Для компиляции исходного кода нам потребуется ассемблер Chipper, автором которого является Hans Christian Egeberg. Скачать можно по ссылке &lt;a href=&#34;http://www.hpcalc.org/hp48/pc/programming/chipper.zip&#34;&gt;http://www.hpcalc.org/hp48/pc/programming/chipper.zip&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Пишем эмулятор CHIP-8. Часть 2: Ассемблер</title>
      <link>https://emunix.org/post/writing-chip-8-emulator-part-2/</link>
      <pubDate>Fri, 30 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://emunix.org/post/writing-chip-8-emulator-part-2/</guid>
      <description>&lt;p&gt;В предыдущей статье мы рассмотрели общее устройство CHIP-8. Сегодня перейдем к описанию &lt;a href=&#34;http://ru.wikipedia.org/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%B0%D1%81%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80%D0%B0&#34;&gt;ассемблерных&lt;/a&gt; команд и их &lt;a href=&#34;http://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%B4_%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8&#34;&gt;опкодов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В этой статье список инструкций условно разбит на три колонки:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;опкод&lt;/code&gt;    &lt;code&gt;команда на ассемблере&lt;/code&gt;    описание&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;И используются следующие обозначения:&lt;br&gt;
&lt;code&gt;nnn&lt;/code&gt; - 12 битный адрес&lt;br&gt;
&lt;code&gt;kk&lt;/code&gt; - 8 битная константа&lt;br&gt;
&lt;code&gt;x&lt;/code&gt; -  4 битный номер регистра&lt;br&gt;
&lt;code&gt;y&lt;/code&gt; - 4 битный номер регистра&lt;br&gt;
&lt;code&gt;1..9, A..F&lt;/code&gt; - шестнадцатеричные цифры&lt;/p&gt;
&lt;h2 id=&#34;инструкции-chip-8&#34;&gt;Инструкции CHIP-8&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;00E0&lt;/code&gt;   &lt;code&gt;CLS&lt;/code&gt;    Очистить экран&lt;/p&gt;
&lt;p&gt;&lt;code&gt;00EE&lt;/code&gt;   &lt;code&gt;RET&lt;/code&gt;    Возвратиться из &lt;a href=&#34;http://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B4%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0&#34;&gt;подпрограммы&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0nnn&lt;/code&gt;    &lt;code&gt;SYS nnn&lt;/code&gt;    Перейти на машинный код RCA 1802 по адресу &lt;strong&gt;nnn&lt;/strong&gt;. Эта инструкция была только в самой первой реализации CHIP-8. В более поздних реализациях и эмуляторах не используется.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Пишем эмулятор CHIP-8. Часть 1: Введение</title>
      <link>https://emunix.org/post/writing-chip-8-emulator-part-1-intro/</link>
      <pubDate>Mon, 19 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://emunix.org/post/writing-chip-8-emulator-part-1-intro/</guid>
      <description>&lt;p&gt;В этой серии статей я собираюсь рассказать как написать простейший эмулятор компьютера на примере CHIP-8.  Вообще CHIP-8 не является реальным компьютером, его можно сравнить с виртуальной машиной (такой как java), но он отлично подходит для понимания основ эмуляции компьютерных систем.&lt;/p&gt;
&lt;p&gt;Эмулятор мы будем писать на языке C++ с использованием графической библиотеки &lt;a href=&#34;http://www.libsdl.org/&#34;&gt;SDL&lt;/a&gt;. Код основывается на исходниках моего эмулятора &lt;a href=&#34;http://code.google.com/p/emuchip/&#34;&gt;emuChip&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;история-chip-8&#34;&gt;История CHIP-8&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CHIP-8&lt;/strong&gt; - это небольшой, интерпретируемый язык программирования и интерпретатор для него, впервые появившийся на домашних компьютерах COSMAC VIP, Telmac 1800, DREAM 6800 в конце 70-х годов. Создателем является Joseph Weisbecker. CHIP-8 использовался для создания игр, таких как Pong, Tetris, Space Invaders и т.п.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/writing-chip-8-emulator-part-1-intro/intro.jpg&#34; alt=&#34;Изображение компьютера&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lazy IPS</title>
      <link>https://emunix.org/post/lazyips-patcher/</link>
      <pubDate>Sun, 19 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://emunix.org/post/lazyips-patcher/</guid>
      <description>Сегодня за пару часов написал IPS патчер для Linux. Он основан на коде моего же патчера pySmartIPS.
Скачать можно по ссылке LazyIPS. Пакет для Arch Linux доступен в AUR.
Зависимости: Python 2 и pygtk.</description>
    </item>
    
    <item>
      <title>Sega Mega Drive Fix Checksum</title>
      <link>https://emunix.org/post/sega-mega-drive-fix-checksum/</link>
      <pubDate>Wed, 08 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://emunix.org/post/sega-mega-drive-fix-checksum/</guid>
      <description>Иногда после пропатчивания ROM&#39;ов с консоли Sega Mega Drive / Sega Genesis игра отказывается запускаться показывая нам красный экран. Это означает что в роме неправильно проставлена контрольная сумма, которую необходимо исправить.
Для исправления контрольной суммы 2 года назад я написал на питоне программу SMD Fix Checksum которую и выкладываю.
Скачать можно на GitHub&#39;е
Зависимости - python 2 и pygtk</description>
    </item>
    
  </channel>
</rss>